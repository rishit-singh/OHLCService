// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ohlc.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_ohlc_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ohlc_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ohlc_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ohlc_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ohlc_2eproto;
namespace OHLCService {
class OHLC;
struct OHLCDefaultTypeInternal;
extern OHLCDefaultTypeInternal _OHLC_default_instance_;
class OHLCContainer;
struct OHLCContainerDefaultTypeInternal;
extern OHLCContainerDefaultTypeInternal _OHLCContainer_default_instance_;
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
}  // namespace OHLCService
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace OHLCService {

// ===================================================================


// -------------------------------------------------------------------

class Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:OHLCService.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  ~Request() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Request(::google::protobuf::internal::ConstantInitialized);

  inline Request(const Request& from)
      : Request(nullptr, from) {}
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Request* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Request& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Request& from) {
    Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Request* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "OHLCService.Request";
  }
  protected:
  explicit Request(::google::protobuf::Arena* arena);
  Request(::google::protobuf::Arena* arena, const Request& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStockFieldNumber = 1,
  };
  // string Stock = 1;
  void clear_stock() ;
  const std::string& stock() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_stock(Arg_&& arg, Args_... args);
  std::string* mutable_stock();
  PROTOBUF_NODISCARD std::string* release_stock();
  void set_allocated_stock(std::string* value);

  private:
  const std::string& _internal_stock() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stock(
      const std::string& value);
  std::string* _internal_mutable_stock();

  public:
  // @@protoc_insertion_point(class_scope:OHLCService.Request)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      33, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr stock_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ohlc_2eproto;
};// -------------------------------------------------------------------

class OHLC final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:OHLCService.OHLC) */ {
 public:
  inline OHLC() : OHLC(nullptr) {}
  ~OHLC() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OHLC(::google::protobuf::internal::ConstantInitialized);

  inline OHLC(const OHLC& from)
      : OHLC(nullptr, from) {}
  OHLC(OHLC&& from) noexcept
    : OHLC() {
    *this = ::std::move(from);
  }

  inline OHLC& operator=(const OHLC& from) {
    CopyFrom(from);
    return *this;
  }
  inline OHLC& operator=(OHLC&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OHLC& default_instance() {
    return *internal_default_instance();
  }
  static inline const OHLC* internal_default_instance() {
    return reinterpret_cast<const OHLC*>(
               &_OHLC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OHLC& a, OHLC& b) {
    a.Swap(&b);
  }
  inline void Swap(OHLC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OHLC* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OHLC* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OHLC>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OHLC& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const OHLC& from) {
    OHLC::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(OHLC* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "OHLCService.OHLC";
  }
  protected:
  explicit OHLC(::google::protobuf::Arena* arena);
  OHLC(::google::protobuf::Arena* arena, const OHLC& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeriodFieldNumber = 1,
    kStockFieldNumber = 2,
    kVolumeFieldNumber = 3,
    kValueFieldNumber = 4,
    kAveragePriceFieldNumber = 5,
  };
  // optional string Period = 1;
  bool has_period() const;
  void clear_period() ;
  const std::string& period() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_period(Arg_&& arg, Args_... args);
  std::string* mutable_period();
  PROTOBUF_NODISCARD std::string* release_period();
  void set_allocated_period(std::string* value);

  private:
  const std::string& _internal_period() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_period(
      const std::string& value);
  std::string* _internal_mutable_period();

  public:
  // optional string Stock = 2;
  bool has_stock() const;
  void clear_stock() ;
  const std::string& stock() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_stock(Arg_&& arg, Args_... args);
  std::string* mutable_stock();
  PROTOBUF_NODISCARD std::string* release_stock();
  void set_allocated_stock(std::string* value);

  private:
  const std::string& _internal_stock() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stock(
      const std::string& value);
  std::string* _internal_mutable_stock();

  public:
  // optional int32 Volume = 3;
  bool has_volume() const;
  void clear_volume() ;
  ::int32_t volume() const;
  void set_volume(::int32_t value);

  private:
  ::int32_t _internal_volume() const;
  void _internal_set_volume(::int32_t value);

  public:
  // optional int32 Value = 4;
  bool has_value() const;
  void clear_value() ;
  ::int32_t value() const;
  void set_value(::int32_t value);

  private:
  ::int32_t _internal_value() const;
  void _internal_set_value(::int32_t value);

  public:
  // optional double AveragePrice = 5;
  bool has_averageprice() const;
  void clear_averageprice() ;
  double averageprice() const;
  void set_averageprice(double value);

  private:
  double _internal_averageprice() const;
  void _internal_set_averageprice(double value);

  public:
  // @@protoc_insertion_point(class_scope:OHLCService.OHLC)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      36, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr period_;
    ::google::protobuf::internal::ArenaStringPtr stock_;
    ::int32_t volume_;
    ::int32_t value_;
    double averageprice_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ohlc_2eproto;
};// -------------------------------------------------------------------

class OHLCContainer final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:OHLCService.OHLCContainer) */ {
 public:
  inline OHLCContainer() : OHLCContainer(nullptr) {}
  ~OHLCContainer() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OHLCContainer(::google::protobuf::internal::ConstantInitialized);

  inline OHLCContainer(const OHLCContainer& from)
      : OHLCContainer(nullptr, from) {}
  OHLCContainer(OHLCContainer&& from) noexcept
    : OHLCContainer() {
    *this = ::std::move(from);
  }

  inline OHLCContainer& operator=(const OHLCContainer& from) {
    CopyFrom(from);
    return *this;
  }
  inline OHLCContainer& operator=(OHLCContainer&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OHLCContainer& default_instance() {
    return *internal_default_instance();
  }
  static inline const OHLCContainer* internal_default_instance() {
    return reinterpret_cast<const OHLCContainer*>(
               &_OHLCContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OHLCContainer& a, OHLCContainer& b) {
    a.Swap(&b);
  }
  inline void Swap(OHLCContainer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OHLCContainer* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OHLCContainer* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OHLCContainer>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OHLCContainer& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const OHLCContainer& from) {
    OHLCContainer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(OHLCContainer* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "OHLCService.OHLCContainer";
  }
  protected:
  explicit OHLCContainer(::google::protobuf::Arena* arena);
  OHLCContainer(::google::protobuf::Arena* arena, const OHLCContainer& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOHLCsFieldNumber = 1,
  };
  // repeated .OHLCService.OHLC OHLCs = 1;
  int ohlcs_size() const;
  private:
  int _internal_ohlcs_size() const;

  public:
  void clear_ohlcs() ;
  ::OHLCService::OHLC* mutable_ohlcs(int index);
  ::google::protobuf::RepeatedPtrField< ::OHLCService::OHLC >*
      mutable_ohlcs();
  private:
  const ::google::protobuf::RepeatedPtrField<::OHLCService::OHLC>& _internal_ohlcs() const;
  ::google::protobuf::RepeatedPtrField<::OHLCService::OHLC>* _internal_mutable_ohlcs();
  public:
  const ::OHLCService::OHLC& ohlcs(int index) const;
  ::OHLCService::OHLC* add_ohlcs();
  const ::google::protobuf::RepeatedPtrField< ::OHLCService::OHLC >&
      ohlcs() const;
  // @@protoc_insertion_point(class_scope:OHLCService.OHLCContainer)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::OHLCService::OHLC > ohlcs_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ohlc_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// OHLC

// optional string Period = 1;
inline bool OHLC::has_period() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void OHLC::clear_period() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.period_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OHLC::period() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:OHLCService.OHLC.Period)
  return _internal_period();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OHLC::set_period(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.period_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:OHLCService.OHLC.Period)
}
inline std::string* OHLC::mutable_period() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_period();
  // @@protoc_insertion_point(field_mutable:OHLCService.OHLC.Period)
  return _s;
}
inline const std::string& OHLC::_internal_period() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.period_.Get();
}
inline void OHLC::_internal_set_period(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.period_.Set(value, GetArena());
}
inline std::string* OHLC::_internal_mutable_period() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.period_.Mutable( GetArena());
}
inline std::string* OHLC::release_period() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:OHLCService.OHLC.Period)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.period_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.period_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void OHLC::set_allocated_period(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.period_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.period_.IsDefault()) {
          _impl_.period_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OHLCService.OHLC.Period)
}

// optional string Stock = 2;
inline bool OHLC::has_stock() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void OHLC::clear_stock() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.stock_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& OHLC::stock() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:OHLCService.OHLC.Stock)
  return _internal_stock();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OHLC::set_stock(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.stock_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:OHLCService.OHLC.Stock)
}
inline std::string* OHLC::mutable_stock() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_stock();
  // @@protoc_insertion_point(field_mutable:OHLCService.OHLC.Stock)
  return _s;
}
inline const std::string& OHLC::_internal_stock() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.stock_.Get();
}
inline void OHLC::_internal_set_stock(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.stock_.Set(value, GetArena());
}
inline std::string* OHLC::_internal_mutable_stock() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.stock_.Mutable( GetArena());
}
inline std::string* OHLC::release_stock() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:OHLCService.OHLC.Stock)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.stock_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.stock_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void OHLC::set_allocated_stock(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.stock_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.stock_.IsDefault()) {
          _impl_.stock_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OHLCService.OHLC.Stock)
}

// optional int32 Volume = 3;
inline bool OHLC::has_volume() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void OHLC::clear_volume() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.volume_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t OHLC::volume() const {
  // @@protoc_insertion_point(field_get:OHLCService.OHLC.Volume)
  return _internal_volume();
}
inline void OHLC::set_volume(::int32_t value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:OHLCService.OHLC.Volume)
}
inline ::int32_t OHLC::_internal_volume() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.volume_;
}
inline void OHLC::_internal_set_volume(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.volume_ = value;
}

// optional int32 Value = 4;
inline bool OHLC::has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void OHLC::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t OHLC::value() const {
  // @@protoc_insertion_point(field_get:OHLCService.OHLC.Value)
  return _internal_value();
}
inline void OHLC::set_value(::int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:OHLCService.OHLC.Value)
}
inline ::int32_t OHLC::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_;
}
inline void OHLC::_internal_set_value(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.value_ = value;
}

// optional double AveragePrice = 5;
inline bool OHLC::has_averageprice() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void OHLC::clear_averageprice() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.averageprice_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double OHLC::averageprice() const {
  // @@protoc_insertion_point(field_get:OHLCService.OHLC.AveragePrice)
  return _internal_averageprice();
}
inline void OHLC::set_averageprice(double value) {
  _internal_set_averageprice(value);
  // @@protoc_insertion_point(field_set:OHLCService.OHLC.AveragePrice)
}
inline double OHLC::_internal_averageprice() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.averageprice_;
}
inline void OHLC::_internal_set_averageprice(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.averageprice_ = value;
}

// -------------------------------------------------------------------

// OHLCContainer

// repeated .OHLCService.OHLC OHLCs = 1;
inline int OHLCContainer::_internal_ohlcs_size() const {
  return _internal_ohlcs().size();
}
inline int OHLCContainer::ohlcs_size() const {
  return _internal_ohlcs_size();
}
inline void OHLCContainer::clear_ohlcs() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ohlcs_.Clear();
}
inline ::OHLCService::OHLC* OHLCContainer::mutable_ohlcs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:OHLCService.OHLCContainer.OHLCs)
  return _internal_mutable_ohlcs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::OHLCService::OHLC>* OHLCContainer::mutable_ohlcs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:OHLCService.OHLCContainer.OHLCs)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_ohlcs();
}
inline const ::OHLCService::OHLC& OHLCContainer::ohlcs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:OHLCService.OHLCContainer.OHLCs)
  return _internal_ohlcs().Get(index);
}
inline ::OHLCService::OHLC* OHLCContainer::add_ohlcs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::OHLCService::OHLC* _add = _internal_mutable_ohlcs()->Add();
  // @@protoc_insertion_point(field_add:OHLCService.OHLCContainer.OHLCs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::OHLCService::OHLC>& OHLCContainer::ohlcs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:OHLCService.OHLCContainer.OHLCs)
  return _internal_ohlcs();
}
inline const ::google::protobuf::RepeatedPtrField<::OHLCService::OHLC>&
OHLCContainer::_internal_ohlcs() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ohlcs_;
}
inline ::google::protobuf::RepeatedPtrField<::OHLCService::OHLC>*
OHLCContainer::_internal_mutable_ohlcs() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.ohlcs_;
}

// -------------------------------------------------------------------

// Request

// string Stock = 1;
inline void Request::clear_stock() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.stock_.ClearToEmpty();
}
inline const std::string& Request::stock() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:OHLCService.Request.Stock)
  return _internal_stock();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Request::set_stock(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.stock_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:OHLCService.Request.Stock)
}
inline std::string* Request::mutable_stock() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_stock();
  // @@protoc_insertion_point(field_mutable:OHLCService.Request.Stock)
  return _s;
}
inline const std::string& Request::_internal_stock() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.stock_.Get();
}
inline void Request::_internal_set_stock(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.stock_.Set(value, GetArena());
}
inline std::string* Request::_internal_mutable_stock() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.stock_.Mutable( GetArena());
}
inline std::string* Request::release_stock() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:OHLCService.Request.Stock)
  return _impl_.stock_.Release();
}
inline void Request::set_allocated_stock(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.stock_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.stock_.IsDefault()) {
          _impl_.stock_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:OHLCService.Request.Stock)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace OHLCService


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ohlc_2eproto_2epb_2eh
